/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BridgeInterface extends ethers.utils.Interface {
  functions: {
    "burn(address,uint256)": FunctionFragment;
    "lock(uint8,address,uint256)": FunctionFragment;
    "mint(string,string,uint8,uint256,address,address)": FunctionFragment;
    "nativeTokens(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "serviceFee()": FunctionFragment;
    "tokens(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlock(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeTokens",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "serviceFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "serviceFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;

  events: {
    "Burn(address,uint256,address)": EventFragment;
    "Lock(uint8,address,uint256)": EventFragment;
    "Mint(address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Unlock(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlock"): EventFragment;
}

export type BurnEvent = TypedEvent<
  [string, BigNumber, string] & {
    token: string;
    amount: BigNumber;
    receiver: string;
  }
>;

export type LockEvent = TypedEvent<
  [number, string, BigNumber] & {
    targetChain: number;
    token: string;
    amount: BigNumber;
  }
>;

export type MintEvent = TypedEvent<
  [string, BigNumber, string] & {
    token: string;
    amount: BigNumber;
    receiver: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type UnlockEvent = TypedEvent<
  [string, BigNumber, string] & {
    token: string;
    amount: BigNumber;
    receiver: string;
  }
>;

export class Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BridgeInterface;

  functions: {
    burn(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lock(
      _targetChain: BigNumberish,
      _nativeToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      _tokenName: string,
      _tokenSymbol: string,
      _tokenDecimals: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      _nativeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nativeTokens(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    serviceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlock(
      _nativeToken: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burn(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lock(
    _targetChain: BigNumberish,
    _nativeToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    _tokenName: string,
    _tokenSymbol: string,
    _tokenDecimals: BigNumberish,
    _amount: BigNumberish,
    _receiver: string,
    _nativeToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nativeTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  serviceFee(overrides?: CallOverrides): Promise<BigNumber>;

  tokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlock(
    _nativeToken: string,
    _amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burn(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lock(
      _targetChain: BigNumberish,
      _nativeToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      _tokenName: string,
      _tokenSymbol: string,
      _tokenDecimals: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      _nativeToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    nativeTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    serviceFee(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlock(
      _nativeToken: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Burn(address,uint256,address)"(
      token?: null,
      amount?: null,
      receiver?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; amount: BigNumber; receiver: string }
    >;

    Burn(
      token?: null,
      amount?: null,
      receiver?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; amount: BigNumber; receiver: string }
    >;

    "Lock(uint8,address,uint256)"(
      targetChain?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [number, string, BigNumber],
      { targetChain: number; token: string; amount: BigNumber }
    >;

    Lock(
      targetChain?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [number, string, BigNumber],
      { targetChain: number; token: string; amount: BigNumber }
    >;

    "Mint(address,uint256,address)"(
      token?: null,
      amount?: null,
      receiver?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; amount: BigNumber; receiver: string }
    >;

    Mint(
      token?: null,
      amount?: null,
      receiver?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; amount: BigNumber; receiver: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Unlock(address,uint256,address)"(
      token?: null,
      amount?: null,
      receiver?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; amount: BigNumber; receiver: string }
    >;

    Unlock(
      token?: null,
      amount?: null,
      receiver?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; amount: BigNumber; receiver: string }
    >;
  };

  estimateGas: {
    burn(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lock(
      _targetChain: BigNumberish,
      _nativeToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      _tokenName: string,
      _tokenSymbol: string,
      _tokenDecimals: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      _nativeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nativeTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    serviceFee(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlock(
      _nativeToken: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burn(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lock(
      _targetChain: BigNumberish,
      _nativeToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      _tokenName: string,
      _tokenSymbol: string,
      _tokenDecimals: BigNumberish,
      _amount: BigNumberish,
      _receiver: string,
      _nativeToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nativeTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    serviceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      _nativeToken: string,
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
