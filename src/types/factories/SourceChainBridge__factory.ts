/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SourceChainBridge,
  SourceChainBridgeInterface,
} from "../SourceChainBridge";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "targetChain",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Lock",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "Unlock",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_targetChain",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "_nativeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "serviceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nativeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
    ],
    name: "unlock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052655af3107a400060015534801561001a57600080fd5b5061002433610029565b610079565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61071c806100886000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638bc39207116100505780638bc39207146100b05780638da5cb5b146100c3578063f2fde38b146100de57600080fd5b806330d5d80814610077578063715018a61461008c5780638abdf5aa14610094575b600080fd5b61008a6100853660046105fe565b6100f1565b005b61008a610351565b61009d60015481565b6040519081526020015b60405180910390f35b61008a6100be366004610645565b6103b7565b6000546040516001600160a01b0390911681526020016100a7565b61008a6100ec366004610687565b610489565b60015481116101475760405162461bcd60e51b815260206004820152601160248201527f546f6f20736d616c6c20616d6f756e742100000000000000000000000000000060448201526064015b60405180910390fd5b60006101528261056b565b9050826001600160a01b03166323b872dd33306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561019d57600080fd5b505afa1580156101b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d591906106ab565b6001546040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b15801561023f57600080fd5b505af1158015610253573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027791906106c8565b506040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038416906323b872dd90606401602060405180830381600087803b1580156102c657600080fd5b505af11580156102da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fe91906106c8565b506040805160ff861681526001600160a01b03851660208201529081018290527f0c55699ac3407db860d8ae8a3649121033cd47663adab15e03aea47fdbea7d7f9060600160405180910390a150505050565b6000546001600160a01b031633146103ab5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161013e565b6103b56000610581565b565b60405163a9059cbb60e01b81526001600160a01b0382811660048301526024820184905284169063a9059cbb90604401602060405180830381600087803b15801561040157600080fd5b505af1158015610415573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043991906106c8565b50604080516001600160a01b0385811682526020820185905283168183015290517fae2a2f3f8158e4173d24a3a113140dcec8a721085e8b5c93e5cd7071718e8df29181900360600190a1505050565b6000546001600160a01b031633146104e35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161013e565b6001600160a01b03811661055f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161013e565b61056881610581565b50565b60006001548261057b91906106ea565b92915050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461056857600080fd5b60008060006060848603121561061357600080fd5b833560ff8116811461062457600080fd5b92506020840135610634816105e9565b929592945050506040919091013590565b60008060006060848603121561065a57600080fd5b8335610665816105e9565b925060208401359150604084013561067c816105e9565b809150509250925092565b60006020828403121561069957600080fd5b81356106a4816105e9565b9392505050565b6000602082840312156106bd57600080fd5b81516106a4816105e9565b6000602082840312156106da57600080fd5b815180151581146106a457600080fd5b60008282101561070a57634e487b7160e01b600052601160045260246000fd5b50039056fea164736f6c6343000809000a";

export class SourceChainBridge__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SourceChainBridge> {
    return super.deploy(overrides || {}) as Promise<SourceChainBridge>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SourceChainBridge {
    return super.attach(address) as SourceChainBridge;
  }
  connect(signer: Signer): SourceChainBridge__factory {
    return super.connect(signer) as SourceChainBridge__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SourceChainBridgeInterface {
    return new utils.Interface(_abi) as SourceChainBridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SourceChainBridge {
    return new Contract(address, _abi, signerOrProvider) as SourceChainBridge;
  }
}
